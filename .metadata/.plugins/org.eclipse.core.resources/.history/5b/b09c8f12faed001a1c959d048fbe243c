package com.cts.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.cts.service.UserService;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig {
	
	@Autowired
	private UserService service;
	
	protected void configureGlobal(AuthenticationManagerBuilder auth) throws Exception{
		auth.userDetailsService(service).passwordEncoder(encodePWD());
	}
	
	@Bean
	public BCryptPasswordEncoder encodePWD() {
		return new BCryptPasswordEncoder();
	}
}
//@Autowired
//DataSource dataSource;
//
//protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//	// For Spring Security deafult schema
//	// auth.jdbcAuthentication().dataSource(dataSource);
//
//	// For Spring Security manual schema
//	auth.jdbcAuthentication().dataSource(dataSource)
//			.usersByUsernameQuery("select username, password, enabled from users where username = ?")
//			.authoritiesByUsernameQuery("select username, authority from authorities where username = ?");
//}
//
//@Bean
//public PasswordEncoder getPasswordEncoder() {
//	return NoOpPasswordEncoder.getInstance();
//}
//}
//
